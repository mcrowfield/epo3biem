--------------------------------------------------------------------------------
--
--   FileName:         vga_controller.vhd
--   Dependencies:     none
--   Design Software:  Quartus II 64-bit Version 12.1 Build 177 SJ Full Version
--
--   HDL CODE IS PROVIDED "AS IS."  DIGI-KEY EXPRESSLY DISCLAIMS ANY
--   WARRANTY OF ANY KIND, WHETHER EXPRESS OR IMPLIED, INCLUDING BUT NOT
--   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
--   PARTICULAR PURPOSE, OR NON-INFRINGEMENT. IN NO EVENT SHALL DIGI-KEY
--   BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR CONSEQUENTIAL
--   DAMAGES, LOST PROFITS OR LOST DATA, HARM TO YOUR EQUIPMENT, COST OF
--   PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
--   BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF),
--   ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER SIMILAR COSTS.
--
--   Version History
--   Version 1.0 05/10/2013 Scott Larson
--     Initial Public Release
--    
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
--
-- Edited by Rik van der Hoorn and Marco Postma for use in EPO-3 'Design a Chip'
--  - Changed pixel clock to 1/4 of the original
--
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
use ieee.numeric_std.all;

ENTITY vga_controller IS
  GENERIC(
    h_pulse  :  INTEGER   := 24;    --horiztonal sync pulse width in pixels
    h_bp     :  INTEGER   := 12;    --horiztonal back porch width in pixels
    h_pixels :  INTEGER   := 160;   --horiztonal display width in pixels
    h_fp     :  INTEGER   := 4;     --horiztonal front porch width in pixels
    h_pol    :  STD_LOGIC := '0';   --horizontal sync pulse polarity (1 = positive, 0 = negative)
    v_pulse  :  INTEGER   := 3;     --vertical sync pulse width in rows
    v_bp     :  INTEGER   := 38;    --vertical back porch width in rows
    v_pixels :  INTEGER   := 480;   --vertical display width in rows
    v_fp     :  INTEGER   := 1;     --vertical front porch width in rows
    v_pol    :  STD_LOGIC := '0');  --vertical sync pulse polarity (1 = positive, 0 = negative)
  PORT(
    pixel_clk :  IN   STD_LOGIC;  --pixel clock at frequency of VGA mode being used
    reset     :  IN   STD_LOGIC;  --active high asycnchronous reset
	red		  :  IN   STD_LOGIC;
	green	  :  IN   STD_LOGIC;
	blue	  :  IN   STD_LOGIC;
	RGB		  :  IN   STD_LOGIC_VECTOR(2 downto 0);
	red_o	  :  OUT  STD_LOGIC;
	green_o	  :  OUT  STD_LOGIC;
	blue_o	  :  OUT  STD_LOGIC;
    h_sync    :  OUT  STD_LOGIC;  --horiztonal sync pulse
    v_sync    :  OUT  STD_LOGIC;  --vertical sync pulse
    disp_ena  :  OUT  STD_LOGIC;  --display enable ('1' = display time, '0' = blanking time)
    column    :  OUT  STD_LOGIC_VECTOR(7 downto 0);    --horizontal pixel coordinate
    row       :  OUT  STD_LOGIC_VECTOR(9 downto 0);   --vertical pixel coordinate
	shz	 	  :  OUT  STD_LOGIC);
END vga_controller;

ARCHITECTURE behavior OF vga_controller IS
  CONSTANT  h_period  :  INTEGER := h_pulse + h_bp + h_pixels + h_fp;  --total number of pixel clocks in a row
  CONSTANT  v_period  :  INTEGER := v_pulse + v_bp + v_pixels + v_fp;  --total number of rows in column
  SIGNAL 	h_count	  :  UNSIGNED(7 downto 0); -- For 200 pixels (800 / 4 due to lower pixel clock)
  SIGNAL	v_count	  :	 UNSIGNED(9 downto 0); -- For 525 lines
  SIGNAL 	disp_ena  :  STD_LOGIC;
BEGIN
  
  PROCESS
  BEGIN
  
	wait until rising_edge(pixel_clk); ---- Synchronization

    IF(reset = '1') THEN  	   --reset asserted
      h_count <= "00000000";   --reset horizontal counter
      v_count <= "0000000000"; --reset vertical counter
      h_sync <= NOT h_pol;  --deassert horizontal sync
      v_sync <= NOT v_pol;  --deassert vertical sync
      disp_ena <= '0';      --disable display
      column <= "00000000"; --reset column pixel coordinate
      row <= "0000000000";  --reset row pixel coordinate
	  shz <= '0';
      
    ELSE

      --counters
      IF(h_count < h_period - 1) THEN    --horizontal counter (pixels)
        h_count <= h_count + 1;
		shz <= '0';
      ELSE
        h_count <= "00000000";
        IF(v_count < v_period - 1) THEN  --veritcal counter (rows)
          v_count <= v_count + 1;
		  shz <= '0';
        ELSE
          v_count <= "0000000000";
		  shz <= '1';
        END IF;
      END IF;

      --horizontal sync signal
      IF(h_count < h_pixels + h_fp OR h_count > h_pixels + h_fp + h_pulse) THEN
        h_sync <= NOT h_pol;    --deassert horiztonal sync pulse
      ELSE
        h_sync <= h_pol;        --assert horiztonal sync pulse
      END IF;
      
      --vertical sync signal
      IF(v_count < v_pixels + v_fp OR v_count > v_pixels + v_fp + v_pulse) THEN
        v_sync <= NOT v_pol;    --deassert vertical sync pulse
      ELSE
        v_sync <= v_pol;        --assert vertical sync pulse
      END IF;

      --set display enable output
      IF(h_count < h_pixels AND v_count < v_pixels) THEN  --display time
        disp_ena <= '1';                                  --enable display
      ELSE                                                --blanking time
        disp_ena <= '0';                                  --disable display
      END IF;

    END IF;
  END PROCESS;

  red_o <= (red OR RGB(2));
  green_o <= (green OR RGB(1));
  blue_o <= (blue OR RGB(0));

  PROCESS(h_count, v_count)
	BEGIN
    IF(disp_ena = '1') THEN
      column <= std_logic_vector(h_count);
	  row <= std_logic_vector(v_count);
	ELSE 
	  column <= "00000000";
	  row <= "0000000000";
    END IF;
  END PROCESS;

END behavior;

